#!/bin/bash

set -e
BOLD='tput bold'
UNBOLD='tput sgr0'

usage()
{
cat << EOF

usage: $($BOLD)$(basename $0)$($UNBOLD) options

This script launches or manages vimide within a screen environment.
  
1. The script begins by launching a screen session that includes a dedicated window labeled 'code', where VimIDE is executed.
2. Another window, labeled 'console', is simultaneously created to host a bash shell, providing a separate space for interactive command-line tasks.

VimIDE Interactive Commands (to be used in the 'code' window, in Vim's visual mode):

- '\\ss': Opens an IPython console in the 'console' window that is directly linked to the active Vim instance.
- '\\\aa': Executes the selected lines of code from the 'code' window in the IPython console.
- '\\xx': Clears the IPython console, providing a clean slate.
- '\\ll': Runs the code cell in the 'code' window, defined by bounds marked with '# %%'.
- '\\dd': Initiates the debugger (pdb) on the current script in the 'code' window within the IPython console.
- '\\\rr': Executes the entire current script in the 'code' window using the IPython console.


OPTIONS:
    $($BOLD)-n, --name NAME$($UNBOLD)   Open a screen session with the specified NAME. If the session does not exist, it will be created.
    $($BOLD)-q, --quit NAME$($UNBOLD)   Terminate the specified screen session.
    $($BOLD)-l, --list$($UNBOLD)        Display a list of all active screen sessions.
    $($BOLD)-d, --dir DIR$($UNBOLD)     Specify the working directory for the session. Defaults to the directory where $(basename "$0") is executed if not provided.
    $($BOLD)-h, --help$($UNBOLD)        Display this help message and exit.
EOF
}

NAME=
CWD=$(realpath .)
CDIR=$CWD
LIST=false
QUIT=false

# getopt
GOTEMP="$(getopt -o "n:q:ld:h" -l "name:,quit:,list,dir:,help"  -n '' -- "$@")"

if ! [ "$(echo -n $GOTEMP |sed -e"s/\-\-.*$//")" ]; then
    echo -En "$(usage)"; exit;
fi

eval set -- "$GOTEMP"


while true ;
do
    case "$1" in
        -n | --name) 
            NAME="vide_$2"
            shift 2;;
        -q | --quit) 
            NAME="vide_$2"
            QUIT=true
            shift 2;;
        -l | --list)
            LIST=true
            shift;
            break;;
        -d | --dir) 
            CWD="$2"
            shift 2;;
        -h | --help)
            echo -e "$(usage)"; exit;
            shift;
            break;;
        --) shift; 
            break;;
    esac
done

if [[ "$LIST" == true ]]; then
    screen -ls | grep vide_ | sed -e"s/^.*vide_\([A-Za-z0-9]\+\).*\(..tached\).*$/\1 \2/"
    exit 0
fi


if [[ -z "$NAME" ]]; then
    echo "Must give a name to the session"
    exit 1
fi

cd $CWD


if [[ "$QUIT" == true ]]; then
    echo "Quitting $(echo $NAME | sed -e"s/vide_//g")..."
    screen -S $NAME -X quit
    echo done
    exit 0
fi

# Check if a `screen` session with the provided $NAME exists. If the session
# does not exist, it creates a new detached `screen` session with the specified
# name. Finally, it retrieves the process ID (PID) of the newly created
# `screen` session.
[[ -z "$(screen -ls | grep "$NAME")" ]] && screen -T screen-256color -dmS $NAME
SCREEN_PID=$(screen -ls| grep $NAME| sed -e"s/\s*\([0-9]\+\)\.$NAME\s*.*/\1/")

# Update the window IDs and window names of a `screen` session with the
# specified name (`$NAME`).
winstr="$(screen -S $NAME -Q windows| sed -e's/ \([0-9]\)/\n\1/g' )"
ids="$(echo "$winstr" | awk '{print $1}')"
windows="$(echo "$winstr" | awk '{print $2}')"


    


# Create the `code` buffer
[[ ! "$( echo "${ids[@]}" | grep 0)" ]] && screen -S $NAME -X screen
[[ "${windows[0]}" != "code" ]] && screen -S $NAME -p 0 -X title code 

# Create the `console` buffer
[[ ! "$( echo "${ids[@]}" | grep 1)" ]] && screen -S $NAME -X screen
[[ "${windows[1]}" != "console" ]] && screen -S $NAME -p 1 -X title console 

# Rin vimide in the `code` buffer and link it to a terminal in the `console` buffer
if [[ -z "$(pstree $SCREEN_PID| grep vim)" ]]; then
    screen -S $NAME -p code -X width 110
    screen -S $NAME -p code -X stuff "vim .\n"
    screen -S $NAME -p code -X stuff ":call RunPyIDE()\n"
    sleep 0.1
    screen -S $NAME -p code -X stuff ":let b:slime_config={'sessionname':'$NAME', 'windowname':'console'}\n"
    sleep 0.1
    screen -S $NAME -p code -X stuff ":au BufRead *.py let b:slime_config={'sessionname':'$NAME', 'windowname':'console'}\n"
fi

# Open a bash shell and attach to the vide `screen` session.
bash -c "
sleep 0.1
screen -S $NAME -X select code
screen -S $NAME -p code -X stuff \":silent call system('reset')\n\"
screen -S $NAME -X split
screen -S $NAME -X focus
screen -S $NAME -X select console
screen -S $NAME -p console -X stuff \"reset\n\"
screen -S $NAME -X focus
screen -S $NAME -X resize $(echo "$LINES * 0.75" | bc) 
" &
echo -ne "\033]0; $(echo -n $(hostname -I | awk '{print $1}')): $(echo $NAME | sed -e"s/vide_//")  \a"
screen -rdS $NAME

